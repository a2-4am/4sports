;license:BSD-3-Clause
;extended open/read/write binary file in ProDOS filesystem, with random access
;copyright (c) Peter Ferrie 2013-2020, 2025

!src "src/bootstar/boot.common.2.inc"

                ;user-defined driver load address
                ldx     #0
                stx     $3A8 ;adrlo
                inx
                stx     $3AC ;read

                lda     ROMIN
                lda     ROMIN

                ldx     #6
                lda     #0
                jsr     .loadpascal
                lda     $CD
                sta     $BD
                lda     #$E0
                sta     .endadr + 1
                lda     LCBANK2
                jsr     .startadr
                bit     LCBANK1
                tax
                tay

.reloc_code1
                lda     .patch_tbl_hi, x
                beq     +
                sta     $ff
                lda     .patch_tbl_lo, x
                sta     $fe
                clc
                lda     ($fe), y
                adc     #>(((($D0E8 + $23 + .hdddataend - .patch_jsr_swap_zpg) + $ff) & -256) - pas_hddencbuf)
                sta     ($fe), y
                inx
                bne     .reloc_code1 ;always
+
                lda     .unrcommand3
                cmp     #$8c ;STY
.reloc_more
                php
.reloc_code2
                inx
                lda     .patch_tbl_hi, x
                beq     +
                sta     $ff
                lda     .patch_tbl_lo, x
                sta     $fe
                clc
                lda     ($fe), y
                adc     #<($D0E8 + $23 - .unrelochdd)
                sta     ($fe), y
                iny
                lda     ($fe), y
                adc     #>($D0E8 + $23 - .unrelochdd)
                sta     ($fe), y
                dey
                beq     .reloc_code2 ;always
+               pla
                and     #1 ;check for carry set previously
                bne     .reloc_more ;carry is clear now

                ldy     #0
-               lda     .reloc, y
                sta     $D0E8 + $23, y
                lda     .reloc + $100, y
                sta     $D0E8 + $23 + $100, y
                iny
                bne     -

.banklc1         lda     $C083 ;varies by version
                ldx     #2
-               lda     .hook_wipe, x
                sta     $d6ad, x
                dex
                bpl     -

                ldx     #(.hidedrive_e-.hidedrive)-1
-               lda     .hidedrive, x
                sta     $d72c, x ;varies by version
                dex
                bpl     -

                txs

.jmpindirect     jmp     ($fff8) ;varies by version

.hook_wipe      jsr      .callback

.hidedrive      asl
                sta     $BF2C
                sta     $BF2E
                ldy     #2
                sty     $BF2D
.hidedrive_e

.callback        lda     #$f2
                sta     $BD
!if backup_prodos=1 {
                ldy     #$1e + $25 + 3 ;3 = preserve size
} else {
                ldy     #$1e + 3 ;3 = preserve size
}
                txa
                beq     .skippage
                cpx     #3
                bne     .nextpage
.patch_jsr      lda     .unhook-1, x
                sta     $d6ad-1, x ;varies by version
                dex
                bne     .patch_jsr
                stx     $BD
                ldx     #7
                stx     $BE
.nextpage        ldy     #0
                tya
.unhook          inc     $BE
.skippage        inx
                rts

.loadpascal      lsr
                txa
                ror
                lsr
                lsr
                sta     $3A4
                txa
                and     #7
                asl
                sta     $BD
.startadr        lda     #$d0
                sta     $3A9
                eor     #$ff
                sec
                adc     .endadr + 1
                cmp     #$10
                bcc     +
                lda     #$10
                sec
                sbc     $BD
+
-               sta     $C3
                jsr     .reloc
                lda     #0
                sta     $BD
                lda     $CF
                sta     $3A9
                sec
.endadr          lda     #0
                sbc     $3A9
                beq     +
                inc     $3A4
                cmp     #$10
                bcc     -
                lda     #$10
                bne     -
+               rts

.patch_tbl_lo
                !byte   <(.patch_lda_hddencbuf1 + 1)
                !byte   <(.patch_ldx_hdddirbuf1 + 2)
                !byte   <(.patch_lda_hdddirbuf1 + 2)
                !byte   <(.patch_ldx_hdddirbuf2 + 2)
                !byte   <(.patch_lda_hdddirbuf2 + 2)
                !byte   <(.patch_ora_hdddirbuf + 2)
                !byte   <(.patch_ldy_hdddirbuf + 1)
                !byte   0

                !byte   <(.patch_jsr_swap_zpg + 1)
                !byte   <(.patch_ora_secttbl + 1)
                !byte   <(.patch_jsr_seek1 + 1)
                !byte   <(.patch_ldy_zp_array + 1)
                !byte   <(.patch_sta_zp_array + 1)
                !byte   <(.patch_jsr_hddreaddirsel + 1)
                !byte   <(.patch_jsr_hddseekrd2 + 1)
                !byte   <(.patch_sta_paddr + 1)
                !byte   0

                !byte   <(.unrcommand3 + 1)
                !byte   <(.unrbloklo1 + 1)
                !byte   <(.unrblokhi1 + 1)
                !byte   <(.unrunit1 + 3)
                !byte   <.unrppacket
                !byte   0

.patch_tbl_hi
                !byte   >(.patch_lda_hddencbuf1 + 1)
                !byte   >(.patch_ldx_hdddirbuf1 + 2)
                !byte   >(.patch_lda_hdddirbuf1 + 2)
                !byte   >(.patch_ldx_hdddirbuf2 + 2)
                !byte   >(.patch_lda_hdddirbuf2 + 2)
                !byte   >(.patch_ora_hdddirbuf + 2)
                !byte   >(.patch_ldy_hdddirbuf + 1)
                !byte   0

                !byte   >(.patch_jsr_swap_zpg + 1)
                !byte   >(.patch_ora_secttbl + 1)
                !byte   >(.patch_jsr_seek1 + 1)
                !byte   >(.patch_ldy_zp_array + 1)
                !byte   >(.patch_sta_zp_array + 1)
                !byte   >(.patch_jsr_hddreaddirsel + 1)
                !byte   >(.patch_jsr_hddseekrd2 + 1)
                !byte   >(.patch_sta_paddr + 1)
                !byte   0

                !byte   >(.unrcommand3 + 1)
                !byte   >(.unrbloklo1 + 1)
                !byte   >(.unrblokhi1 + 1)
                !byte   >(.unrunit1 + 3)
                !byte   >.unrppacket
                !byte   0

.c5_parms
                !byte   2
                !byte   0
                !word   $281
                !byte   $d1

!src "src/bootstar/boot.common.3.inc"

.unrelochdd
.reloc     = .unrelochdd ;no need to move
!pseudopc .reloc {
.patch_jsr_swap_zpg
                jsr     .swap_zpg
                lda     $BD
                sta     $CD
                lda     $3A8
                sta     $CE
                lda     $3A9
                sta     $CF

.loopsect
                lda     #0
                sta     sizehi
                lda     $CD
                and     #$0f
                tay
                lda     $3A4
                asl
                asl
                asl
                rol     sizehi
                asl
                rol     sizehi
.patch_ora_secttbl
                ora     .secttbl, y
                tax
                lda     sizehi
                lsr
                sta     treeidx
                txa
                ror
                php
.patch_jsr_seek1
                jsr     .seek1
                plp
                ldy     #0
                tya
.patch_lda_hddencbuf1
                adc     #>pas_hddencbuf
                sta     adrhi
                lda     $BE
                beq     .copysect
                ldx     $C3
                dex
                bne     .copysect
                ldx     $CD
                inx
                txa
                sec
                sbc     $BD
                cmp     $BF
                bne     .copysect
                lda     $CF
                sta     $C5
                sty     $CE
                lda     #2
                sta     $CF

.copysect        lda     (adrlo),y
                sta     ($CE),y
                iny
                bne     .copysect

.nextsect        inc     $CD
                inc     $CF
                dec     $C3
                bne     .loopsect

.swap_zpg
                clc

.swap_zpgi       ldx     #(last_zp - first_zp)
-               lda     first_zp,x
.patch_ldy_zp_array
                ldy     .zp_array,x
.patch_sta_zp_array
                sta     .zp_array,x
                sty     first_zp,x
                dex
                bpl     -
                rts


.secttbl         !byte   $00, $0e, $0d, $0c, $0b, $0a, $09, $08, $07, $06, $05, $04, $03, $02, $01, $0f

.seek1           sta     blkidx
!src "src/bootstar/boot.common.5.inc"
} ;reloc

;[music] you can't touch this [music]
;math magic to determine ideal loading address, and information dump
!ifdef PAS_PASS2 {
} else { ;PAS_PASS2 not defined
  !set PAS_PASS2=1
      !pseudopc ((.hdddataend + $ff) & -256) {
        pas_hdddirbuf = *
      }
          pas_hddencbuf = pas_hdddirbuf ;writes come from cache
            pas_hddtreebuf = pas_hdddirbuf
} ;PAS_PASS2

.readbuff
!byte $D3,$C1,$CE,$A0,$C9,$CE,$C3,$AE