;license:MIT
;(c) 2018-2020 by 4am & qkumba
;
; Exomizer glue functions
;
; Public functions
; - DecompressGameHelp
; - DecompressSHR
; - DecompressAuxSHROnIdle
; - DecompressAuxSHR
; - DecompressDHGR
; - DecompressHGR
; - DecompressAfterLoad
; - ResumeAuxDecompress
;

kDecompressInMainMem = 0             ; must be 0 and 1 in this order, used as index
kDecompressInAuxMem  = 1             ; against base softswitch address

kCompressedDataIncludesAddress = 0   ; must be 0, compared with BEQ

;------------------------------------------------------------------------------
; DecompressGameHelp
;
; in:    compressed game help data at $08F8/main
;        file size in sizelo2/sizehi2 as set by ProRWTS2
; out:   decompressed game help data at $0900+/main
;        also see notes in DecompressAfterLoad
;------------------------------------------------------------------------------
DecompressGameHelp
         clv                         ; V=0 -> always complete decompression
         ldx   #kDecompressInMainMem ; data is in mainmem
         ldy   #kCompressedDataIncludesAddress
         lda   #$08                  ; target address (hi) -1
         bne   DecompressAfterLoad   ; always branches

;------------------------------------------------------------------------------
; DecompressSHR
;
; in:    compressed SHR data at $1FF8/main
;        file size in sizelo2/sizehi2 as set by ProRWTS2
; out:   decompressed SHR data at $2000..$9FFF/main
;        also see notes in DecompressAfterLoad
;------------------------------------------------------------------------------
DecompressSHR
         clv                         ; V=0 -> always complete decompression
         ldx   #kDecompressInMainMem ; data is in mainmem
         ldy   #$A0
         lda   #$1F                  ; target address (hi) -1
         bne   DecompressAfterLoad   ; always branches

;------------------------------------------------------------------------------
; DecompressAuxSHR/DecompressAuxSHROnIdle
;
; in:    compressed SHR data at $1FF8/aux
;        file size in sizelo2/sizehi2 as set by ProRWTS2
; out:   decompressed SHR data at $2000..$9FFF/aux
;        also see notes in DecompressAfterLoad
;------------------------------------------------------------------------------
DecompressAuxSHROnIdle
         bit   SHRRTS                ; V=1 -> allow early exit on keypress
         !byte $A9
DecompressAuxSHR
         clv                         ; V=0 -> always complete decompression
         ldx   #kDecompressInAuxMem  ; data is in auxmem
         ldy   #$A0
         lda   #$1F                  ; target address (hi) -1
         bne   DecompressAfterLoad   ; always branches

;------------------------------------------------------------------------------
; DecompressDHGR
;
; in:    compressed DHGR data at $3FF8+/aux
;        file size in sizelo2/sizehi2 as set by ProRWTS2
; out:   decompressed DHGR data at $4000..$5FFF/main and $4000..$5FFF/aux
;        $6000..$7FFF/aux clobbered by decompressor
;        also see notes in DecompressAfterLoad
;------------------------------------------------------------------------------
DecompressDHGR
         clv                         ; V=0 -> always complete decompression
         ldx   #kDecompressInAuxMem  ; data is in auxmem
         ldy   #$80
         lda   #$3F                  ; target address (hi) -1
         jsr   DecompressAfterLoad
         ; mainmem R/W after DecompressAfterLoad
         sta   READAUXMEM
         lda   #$60
         sta   PageFrom+2
         lda   #$40
         jmp   CopyHGR               ; switches back to READMAINMEM on exit

;------------------------------------------------------------------------------
; DecompressHGR
;
; in:    compressed HGR data at $3FF8/main
;        file size in sizelo2/sizehi2 as set by ProRWTS2
; out:   decompressed HGR data at $4000..$5FFF/main
;        also see notes in DecompressAfterLoad
;------------------------------------------------------------------------------
DecompressHGR
         clv                         ; V=0 -> always complete decompression
         ldx   #kDecompressInMainMem ; data is in mainmem
         ldy   #$60
         lda   #$3F                  ; target address (hi) -1
         ; /!\ execution falls through here

;------------------------------------------------------------------------------
; DecompressAfterLoad
;
; in:    A = target address (hi) minus 1
;        X = 0 if data is in mainmem
;        X = 1 if data is in auxmem
;        Y = decrunch _byte_hi, or 0 if compressed data includes this address
;        V = 0 if decompression should always run to completion (ignoring keypresses)
;        V = 1 if decompression should exit early on keypress (even if incomplete)
;        file size in sizelo2/sizehi2 as set by ProRWTS2
; out:   decompressed data at target address
;        /!\ 8 bytes before target address will be clobbered because compressed
;            data is loaded there
;        $00A0..$00A9 clobbered by decompressor
;        $0200..$02CD clobbered by decompressor
;        mainmem R/W (always, even if data was in auxmem)
;------------------------------------------------------------------------------
DecompressAfterLoad
         sta   READMAINMEM, x        ; X = 0 or 1, so this will be READMAINMEM or READAUXMEM
         sta   WRITEMAINMEM, x       ; X = 0 or 1, so this will be WRITEMAINMEM or WRITEAUXMEM
                                     ; remember these don't affect zero page or stack
                                     ; we always use mainmem zp and mainmem stack

         pha                         ; push target address (hi) -1
         tya
         pha

         bvc   +
         lda   #$60                  ; if V=1, set up returning from decompressor on keypress
         +HIDE_NEXT_2_BYTES
+        lda   #$EA                  ; if V=0, ignore keypresses within decompressor
         sta   DECRUNCH_EXIT_ON_KEYPRESS

         jsr   SwitchToBank2
         jsr   EnableAccelerator

         pla
         tay

         lda   sizelo2               ; size of compressed data (lo) as set by ProRWTS2
         clc
         adc   #$F8
         sta   _byte_lo
         lda   sizehi2               ; size of compressed data (lo) as set by ProRWTS2
         sta   zp_bitbuf
         pla                         ; target address (hi) -1
         adc   zp_bitbuf
         sta  _byte_hi

         tya
         beq   +
         sta   zp_dest_hi
         lda   #0
         sta   zp_dest_lo
         jsr   decrunch_dest_is_already_set
         jmp   .postDecompress
+
         jsr   decrunch
.postDecompress
         stx   exo_save_x
         sty   exo_save_y
         sta   READMAINMEM
         sta   WRITEMAINMEM
         jmp   DisableAcceleratorAndSwitchToBank1

ResumeAuxDecompress
         jsr   SwitchToBank2
         jsr   EnableAccelerator
         sta   READAUXMEM
         sta   WRITEAUXMEM
         lda   #$EA
         sta   DECRUNCH_EXIT_ON_KEYPRESS
         ldx   exo_save_x
         ldy   exo_save_y
         jsr   DECRUNCH_EXIT_ON_KEYPRESS+1
         jmp   .postDecompress
