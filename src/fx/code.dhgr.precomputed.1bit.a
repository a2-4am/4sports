!cpu 6502
!to "build/FXCODE/DHGR1",plain
*=$6200

         !source "src/fx/macros.a"

;DHGRPrecomputed1Bit
         jsr   iBuildDHGRSparseBitmasks1Bit
         jsr   iBuildHGRTables
         jsr   iBuildHGRMirrorTables
         jsr   iBuildDHGRMirrorCols
         +COPY_TO_0 .start, .end
         jmp   .InputLoop
.start
!pseudopc 0 {
.Exit1Bit rts
.InputLoop
         ldy   #0
.input=*+1
         ldx   Coordinates1Bit       ; first value: HGR row (only 0..95 will be in input array)
         bmi   .Exit1Bit             ; if > 127 then we're done
         +ROW_X_TO_BASE_ADDRESSES .src1, .src2, .dest1, .dest2
         +ROW_X_TO_MIRROR_ADDRESSES .mirror_src1, .mirror_src2, .mirror_dest1, .mirror_dest2

         inc   .input
         lda   (<.input), y
         +HIGH_3_LOW_5 .input
         sty   <.y
         clc
.bankloop
         lda   copymasks1bit, x
         beq   +
         sta   <.copymask

         ; main 1x2 block in top-left quadrant
.src1=*+1
         lda   $FDFD, y
         eor   (<.dest1), y
.copymask=*+1
         and   #$FD                  ; SMC
         eor   (<.dest1), y
.dest1=*+1
         sta   $FDFD, y
.src2=*+1
         lda   $FDFD, y
         eor   (<.dest2), y
         and   <.copymask
         eor   (<.dest2), y
.dest2=*+1
         sta   $FDFD, y

         ; corresponding 1x2 block in bottom-left quadrant (opposite row, original column)
         +COPY_BIT_ZP .mirror_src1, .mirror_dest1, .copymask
         +COPY_BIT_ZP .mirror_src2, .mirror_dest2, .copymask

+
         lda   mirror_copymasks1bit, x              ; exists at the same address in mainmem and auxmem but each is different
         beq   +
         sta   <.mirror_copymask
         ; corresponding 1x2 block in bottom-right quadrant (opposite row, opposite column)
         lda   mirror_cols, y                   ; duplicated in mainmem and auxmem
         tay
.mirror_src1=*+1
         lda   $FDFD, y
         eor   (<.mirror_dest1), y
.mirror_copymask=*+1
         and   #$FD                             ; SMC
         eor   (<.mirror_dest1), y
.mirror_dest1=*+1
         sta   $FDFD, y
.mirror_src2=*+1
         lda   $FDFD, y
         eor   (<.mirror_dest2), y
         and   <.mirror_copymask
         eor   (<.mirror_dest2), y
.mirror_dest2=*+1
         sta   $FDFD, y

         ; corresponding 1x2 block in top-right quadrant (same row, opposite column)
         +COPY_BIT_ZP .src1, .dest1, .mirror_copymask
         +COPY_BIT_ZP .src2, .dest2, .mirror_copymask
+
         bcs   +
         sta   $C003
         sta   $C005
.y=*+1
         ldy   #$FD
         sec
         bcs   .bankloop
+        sta   $C002
         sta   $C004

         +INC_INPUT_AND_LOOP .input, .InputLoop
}
.end
